"""
ragchain.py - Retrieval-Augmented Generation (RAG) chain implementation

This module contains the core RAG functionality:
- Setting up the retrieval chain to find relevant documents
- Creating prompts that combine context with user questions
- Generating responses using the language model
- Managing the complete RAG workflow
"""

import streamlit as st
from langchain_core.prompts import ChatPromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from utils import initialize_models, format_docs


def run_rag_chain(query, custom_prompt=None):
    """
    Processes a user query using a Retrieval-Augmented Generation (RAG) chain.
    
    The RAG process works in these steps:
    1. **Retrieval**: Find relevant document chunks using similarity search
    2. **Augmentation**: Combine retrieved context with the user's question
    3. **Generation**: Use a language model to generate an answer based on context
    
    This approach ensures that:
    - Answers are grounded in the uploaded documents
    - The model has access to specific, relevant information
    - Responses are more accurate and factual than general knowledge alone
    
    Args:
        query (str): The user's question that needs to be answered
        custom_prompt (str, optional): Custom prompt template to use instead of default.
                                     Must include {context} and {question} placeholders.
    
    Returns:
        str: A response generated by the language model based on retrieved context,
             or an error message if something goes wrong.
    
    Example:
        >>> response = run_rag_chain("What are the effects of climate change?")
        >>> print(response)
        "Based on the documents, climate change causes rising sea levels..."
    """
    
    # Step 1: Validate prerequisites
    if not st.session_state.get("gemini_api_key"):
        st.error("❌ Please enter your Gemini API key first!")
        return "API key required to process queries."

    # Step 2: Initialize models (embedding model and vector database)
    initialize_models()
    
    # Step 3: Create retriever for finding relevant documents
    # The retriever uses similarity search to find the most relevant chunks
    retriever = st.session_state.db.as_retriever(
        search_type="similarity",     # Use cosine similarity between embeddings
        search_kwargs={'k': 5}        # Retrieve top 5 most similar chunks
    )

    # Step 4: Set up the prompt template
    if custom_prompt:
        PROMPT_TEMPLATE = custom_prompt
    else:
        # Default prompt template optimized for Environmental sciences
        # You can modify this to match your specific domain
        PROMPT_TEMPLATE = """You are a highly knowledgeable assistant specializing in Environmental sciences. 
Answer the question based only on the following context:
{context}

Answer the question based on the above context:
{question}

Use the provided context to answer the user's question accurately and concisely.
Justify your answers.
Don't give information not mentioned in the CONTEXT INFORMATION.
Do not say "according to the context" or "mentioned in the context" or similar."""

    # Create the prompt template object
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)

    # Step 5: Initialize the language model for generation
    chat_model = ChatGoogleGenerativeAI(
        model="gemini-1.5-flash",                              # Google's fast, efficient model
        api_key=st.session_state.get("gemini_api_key"),
        temperature=1                                          # Controls randomness (0=deterministic, 1=creative)
    )

    # Step 6: Set up output parser to extract text from model response
    output_parser = StrOutputParser()

    # Step 7: Build the RAG chain using LangChain's pipe operator (|)
    # This creates a pipeline: retrieve → format → prompt → generate → parse
    rag_chain = (
        {
            "context": retriever | format_docs,    # Retrieve docs and format as single string
            "question": RunnablePassthrough()      # Pass the question through unchanged
        } 
        | prompt_template                          # Insert context and question into prompt
        | chat_model                               # Generate response using language model
        | output_parser                            # Extract text from model response
    )

    # Step 8: Execute the RAG chain with the user's query
    try:
        response = rag_chain.invoke(query)
        return response
    except Exception as e:
        st.error(f"❌ Error processing query: {str(e)}")
        return f"Sorry, I encountered an error while processing your query: {str(e)}"


def get_relevant_documents(query, k=5):
    """
    Retrieve relevant documents for a query without generating a response.
    
    This function is useful for:
    - Debugging retrieval quality
    - Understanding what context the model will use
    - Building custom RAG workflows
    
    Args:
        query (str): The query to search for
        k (int): Number of documents to retrieve (default: 5)
    
    Returns:
        list: List of relevant document objects, or empty list if error
    """
    try:
        # Ensure models are initialized
        if not st.session_state.get("db"):
            initialize_models()
        
        # Create retriever and get documents
        retriever = st.session_state.db.as_retriever(
            search_type="similarity",
            search_kwargs={'k': k}
        )
        
        docs = retriever.get_relevant_documents(query)
        return docs
        
    except Exception as e:
        st.error(f"❌ Error retrieving documents: {str(e)}")
        return []


def create_custom_rag_chain(prompt_template, model_params=None):
    """
    Create a custom RAG chain with specific parameters.
    
    This function allows for more advanced customization of the RAG process,
    including different model parameters and prompt structures.
    
    Args:
        prompt_template (str): Custom prompt template with {context} and {question}
        model_params (dict, optional): Parameters for the language model
                                     (temperature, max_tokens, etc.)
    
    Returns:
        RunnableSequence: Custom RAG chain ready for invocation
    """
    try:
        # Initialize models
        initialize_models()
        
        # Set up retriever
        retriever = st.session_state.db.as_retriever(
            search_type="similarity",
            search_kwargs={'k': 5}
        )
        
        # Create prompt template
        prompt = ChatPromptTemplate.from_template(prompt_template)
        
        # Set up model with custom parameters
        default_params = {
            "model": "gemini-1.5-flash",
            "api_key": st.session_state.get("gemini_api_key"),
            "temperature": 1
        }
        
        if model_params:
            default_params.update(model_params)
        
        chat_model = ChatGoogleGenerativeAI(**default_params)
        output_parser = StrOutputParser()
        
        # Build custom chain
        custom_chain = (
            {
                "context": retriever | format_docs,
                "question": RunnablePassthrough()
            }
            | prompt
            | chat_model
            | output_parser
        )
        
        return custom_chain
        
    except Exception as e:
        st.error(f"❌ Error creating custom RAG chain: {str(e)}")
        return None


def validate_prompt_template(prompt_template):
    """
    Validate that a prompt template contains required placeholders.
    
    Args:
        prompt_template (str): The prompt template to validate
    
    Returns:
        tuple: (is_valid, error_message)
    """
    if not prompt_template:
        return False, "Prompt template cannot be empty"
    
    if "{context}" not in prompt_template:
        return False, "Prompt template must include {context} placeholder"
    
    if "{question}" not in prompt_template:
        return False, "Prompt template must include {question} placeholder"
    
    return True, "Prompt template is valid"